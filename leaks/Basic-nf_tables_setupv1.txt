To check that nftables is installed and running
modinfo nf_tables
To see any already listed nftables simply do
lsmod | grep nf_tables

Now if youre going to run nftables i wouldnt suggest running iptables on top of it as it may cause connection and latency issues
so in order to stop iptables do the following to drop iptables for IPv4 and IPv6
iptables -F
ip6tables -F

Ok now my preferred setup as nftables is just netfilter in a table format is running the following netfilter rules for optimum security and protection,
from well known attacks such as udp-rape ovhcpurape killallv1 and killallv2 as well as numerous amplification attacks that could be potentionally dangerous if it succeeds in getting through the kernel

NOTE: Be sure to not copy and paste every listed rule at once as it could overload cpu and crash your server

sysctl -w kernel.printk=4417
sysctl -w kernel.panic=10
sysctl -w kernel.sysrq=0
sysctl -w kernel.shmmax=4294967296
sysctl -w kernel.shmall=4194304
sysctl -w kernel.core_uses_pid 1
sysctl -w kernel.msgmnb=65536
sysctl -w kernel.msgmax=65536
sysctl -w vm.swappiness=20
sysctl -w vm.dirty_ratio=80
sysctl -w vm.dirty_background_ratio=5
sysctl -w fs.file-max=2097152
sysctl -w net.core.netdev_max_backlog=262144
sysctl -w net.core.rmem_default=31457280
sysctl -w net.core.rmem_max=67108864
sysctl -w net.core.wmem_default=31457280
sysctl -w net.core.wmem_max=67108864
sysctl -w net.core.somaxconn=65535
sysctl -w net.core.optmem_max=25165824
sysctl -w net.ipv4.neigh.default.gc_thresh1=4096
sysctl -w net.ipv4.neigh.default.gc_thresh2=8192
sysctl -w net.ipv4.neigh.default.gc_thresh3=16384
sysctl -w net.ipv4.neigh.default.gc_interval=5
sysctl -w net.ipv4.neigh.default.gc_stale_time=120
sysctl -w net.netfilter.nf_conntrack_max=10000000
sysctl -w net.netfilter.nf_conntrack_tcp_loose=0
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_established=1800
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_close=10
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_close_wait=10
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_fin_wait=20
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_last_ack=20
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_syn_recv=20
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_syn_sent=20
sysctl -w net.netfilter.nf_conntrack_tcp_timeout_time_wait=10
sysctl -w net.ipv4.tcp_slow_start_after_idle=0
sysctl -w net.ipv4.ip_local_port_range=1024 65000
sysctl -w net.ipv4.ip_no_pmtu_disc=1
sysctl -w net.ipv4.route.flush=1
sysctl -w net.ipv4.route.max_size = 8048576
sysctl -w net.ipv4.icmp_echo_ignore_broadcasts = 1
sysctl -w net.ipv4.icmp_ignore_bogus_error_responses = 1
sysctl -w net.ipv4.tcp_congestion_control=htcp
sysctl -w net.ipv4.tcp_mem = 65536 131072 262144
sysctl -w net.ipv4.udp_mem = 65536 131072 262144
sysctl -w net.ipv4.tcp_rmem = 4096 87380 33554432
sysctl -w net.ipv4.udp_rmem_min=16384
sysctl -w net.ipv4.tcp_wmem = 4096 87380 33554432
sysctl -w net.ipv4.udp_wmem_min = 16384
sysctl -w net.ipv4.tcp_max_tw_buckets = 1440000
sysctl -w net.ipv4.tcp_tw_recycle = 0
sysctl -w net.ipv4.tcp_tw_reuse = 1
sysctl -w net.ipv4.tcp_max_orphans = 400000

sysctl -w net.ipv4.tcp_window_scaling=1
sysctl -w net.ipv4.tcp_rfc1337=1
sysctl -w net.ipv4.tcp_syncookies=1
sysctl -w net.ipv4.tcp_synack_retries=1
sysctl -w net.ipv4.tcp_syn_retries=2
sysctl -w net.ipv4.tcp_max_syn_backlog=16384
sysctl -w net.ipv4.tcp_timestamps=1
sysctl -w net.ipv4.tcp_sack=1
sysctl -w net.ipv4.tcp_fack=1
sysctl -w net.ipv4.tcp_ecn=2
sysctl -w net.ipv4.tcp_fin_timeout=10
sysctl -w net.ipv4.tcp_keepalive_time=600
sysctl -w net.ipv4.tcp_keepalive_intvl=60
sysctl -w net.ipv4.tcp_keepalive_probes=10
sysctl -w net.ipv4.tcp_no_metrics_save=1
sysctl -w net.ipv4.ip_forward=0
sysctl -w net.ipv4.conf.all.accept_redirects=0
sysctl -w net.ipv4.conf.all.send_redirects=0
sysctl -w net.ipv4.conf.all.accept_source_route=0
sysctl -w net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.all.log_martians=1
net.ipv4.conf.default.log_martians=1

Ok now that thats out of the way lets setup a table for incoming traffic 

nft add table inet incoming-traffic

nft add chain inet incoming-traffic management

nft add rule inet incoming-traffic management tcp dport 22

nft add chain inet incoming-traffic web-traffic

nft add rule inet incoming-traffic web-traffic tcp dport 80 counter

nft add rule inet incoming-traffic web-traffic tcp dport 443 counter



Accepting SSH and Webtraffic
 
nft add rule ip6 firewall input tcp dport {ssh, http, https} accept

More With Webtraffic
nft add table inet firewall
nft add chain inet firewall input { type filter hook input priority 0 \; policy drop\; } 
# Allow Established/Related
nft add rule inet firewall input ct state established,related accept
# Drop Invalid Connections
nft add rule inet firewall input ct state invalid drop
# allow ping
nft add rule inet firewall input ip protocol icmp limit rate 4/second accept
# allow ssh and http(s)
nft add rule inet firewall input tcp dport { 22, http, https }
nft add rule inet firewall input udp dport { 22, http, https }
# don't forward anything, you're not a router!
nft add chain inet firewall forward { type filter hook forward priority 0 \; policy drop\; } 
# allow all outgoing traffic
nft add chain inet firewall output { type filter hook output priority 0 \; policy accept\; }

nft add rule ip firewall input ip protocol vmap {tcp : jump tcp-chain, udp : jump udp-chain , icmp : jump icmp-chain }

nft add rule ip firewall input ip saddr . ip daddr . ip protocol {1.1.1.1 . 2.2.2.2 . tcp, 1.1.1.1 . 3.3.3.3 . udp} drop

You can also forge atomic rule use completely and create the whole ruleset in a text file, 
which you can easily load. Simply use nft -f <filepath>. 
Your file is in the same format as nft list ruleset which means that nft list ruleset > file is a perfectly fine way to backup your setup.

